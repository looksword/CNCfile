#ifndef EZCLIENT_H
#define EZCLIENT_H

#include <QTcpSocket>
#include <QDataStream>

class GIOPPackage
{
public:
    QByteArray GIOP_HEAD;
    static const int GIOP_HEAD_LEN = 12;
    static const int GIOP_HEAD_LEN_START = 8;
    QByteArray Msg;
    static const int GIOP_REPLY_MSG_DATA_INDEX = 12;
    static const int GIOP_HEAD_MSG_TYPE_INDEX = 7;
    static const int GIOP_MSG_EXCEPTION_INDEX = 8;

    int MsgLen()
    {
        int len = GIOP_HEAD[GIOP_HEAD_LEN_START] & 0x000000FF;
        len |= (GIOP_HEAD[GIOP_HEAD_LEN_START+1] << 8) & 0x0000FF00;
        len |= (GIOP_HEAD[GIOP_HEAD_LEN_START+2] << 16) & 0x00FF0000;
        len |= (GIOP_HEAD[GIOP_HEAD_LEN_START+3] << 24) & 0xFF000000;
        return len;
    }

    //uint16 ToUInt16
};

class EZNcDef
{
public:
    static const int EZ_TRUE = 1;
    static const int EZ_FALSE = 0;
    static const int EZNC_SYS_MAGICCARD64 = 0;      //'/ MELDASMAGIC Card64Ⅱ
    static const int EZNC_SYS_MAGICBOARD64 = 1;     // '/ MELDASMAGIC64
    static const int EZNC_SYS_MELDAS6X5L = 2;      //'/ MELDAS600L(M6x5L)
    static const int EZNC_SYS_MELDAS6X5M = 3;       //'/ MELDAS600M(M6x5M)
    static const int EZNC_SYS_MELDASC6C64 = 4;      //'/ MELDASC6C64
    static const int EZNC_SYS_MELDAS700L = 5;      //'/ MELDAS700L
    static const int EZNC_SYS_MELDAS700M = 6;       //'/ MELDAS700M
    static const int EZNC_SYS_MELDASC70 = 7;       //'/ MELDASC70
    static const int EZNC_SYS_MELDAS800L = 8;      //'/ MELDAS800L
    static const int EZNC_SYS_MELDAS800M = 9;       //'/ MELDAS800M
    static const int EZNC_PLCAXIS = 255;         //'/ PLC軸指定

    static const int EZNC_SYS_MULTI = 0x00010000;	// マルチスレッド指定

    /// <summary>
    /// 主程序
    /// </summary>
    static const int EZNC_MAINPRG = 0;
    /// <summary>
    /// 子程序
    /// </summary>
    static const int EZNC_SUBPRG = 1;
    /// <summary>
    /// M指令1
    /// </summary>
    static const int EZNC_MCODE1 = 0;              // '/ M指令1
    /// <summary>
    /// M指令2
    /// </summary>
    static const int EZNC_MCODE2 = 10;              //'/ M指令2
    /// <summary>
    /// M指令3
    /// </summary>
    static const int EZNC_MCODE3 = 20;              //'/ M指令3
    /// <summary>
    /// M指令4
    /// </summary>
    static const int EZNC_MCODE4 = 30;             // '/ M指令4
    /// <summary>
    /// S指令1
    /// </summary>
    static const int EZNC_SCODE1 = 1;              // '/ S指令1
    /// <summary>
    /// T指令1
    /// </summary>
    static const int EZNC_TCODE1 = 2;               //'/ T指令1
    /// <summary>
    /// B指令1
    /// </summary>
    static const int EZNC_BCODE1 = 3;              // '/ B指令1
    /// <summary>
    /// M指令
    /// </summary>
    static const int EZNC_M = 0;					 //'/ M指令
    /// <summary>
    /// S指令
    /// </summary>
    static const int EZNC_S = 1;					 //'/ S指令
    /// <summary>
    /// T指令
    /// </summary>
    static const int EZNC_T = 2;						 //'/ T指令
    /// <summary>
    /// B指令
    /// </summary>
    static const int EZNC_B = 3;					 //'/ B指令
    /// <summary>
    /// 可登记程序的最大数目
    /// </summary>
    static const int EZNC_PRG_MAXNUM = 0;           // '/ 最大
    /// <summary>
    /// 当前注册的程序数
    /// </summary>
    static const int EZNC_PRG_CURNUM = 1;             //'/ 当前
    /// <summary>
    /// 剩余数量的注册程序
    /// </summary>
    static const int EZNC_PRG_RESTNUM = 2;           //'/ 可能
    /// <summary>
    /// 已注册字符数
    /// </summary>
    static const int EZNC_PRG_CHARNUM = 3;            //'/ 文字数
    /// <summary>
    /// 剩余数量（250字符为单位）
    /// </summary>
    static const int EZNC_PRG_RESTCHARNUM = 4;
    static const int EZNC_DISK_DIRTYPE = 65536;
    static const int EZNC_DISK_COMMENT = 4;
    static const int EZNC_DISK_DATE = 2;
    static const int EZNC_DISK_SIZE = 1;
    /// <summary>
    /// 通讯启动
    /// </summary>
    static const int EZNC_COMMACT_TRUE = 1;     //'/ 通信起動
    /// <summary>
    /// 通讯停止
    /// </summary>
    static const int EZNC_COMMACT_FALSE = 0;    //'/ 通信停止
    static const int EZ_T_CHAR = 17;                //'/ (byte)
    static const int EZ_T_SHORT = 2;                //'/                  (short)
    static const int EZ_T_LONG = 3;                 //'/                  (int)
    static const int EZ_T_DOUBLE = 5;                //'/                  (double)
    static const int EZ_T_STR = 8;                  //'/                  (bstr)
    static const int EZ_T_DLONG = 16384;             //'/                  (void)
    static const int M_ALM_ALL_ALARM = 0;
    static const int M_ALM_NC_ALARM = 256;
    static const int M_ALM_STOP_CODE = 512;
    static const int M_ALM_PLC_ALARM = 768;
    static const int M_ALM_OPE_MSG = 1024;
    static const int M_ALM_WARNING = 1280;
    static const int M_ALM_NC_SYSTEM = 257;
    static const int M_ALM_NC_SERVO = 258;
    static const int M_ALM_NC_MCP = 259;
    static const int M_ALM_NC_BASICPLC = 260;
    static const int M_ALM_NC_USERPLC = 261;
    static const int M_ALM_NC_PROGRAM = 262;
    static const int M_ALM_NC_SERVO_WARNING = 263;
    static const int M_ALM_NC_MCP_WARNING = 264;
    static const int M_ALM_NC_SYSTEM_WARNING = 265;
    static const int M_ALM_NC_OPERATION = 266;
    static const int M_ALM_OPE_ALARM = 267;
    static const int EZNC_PLC_1SHOT = 16;
    static const int EZNC_PLC_MODAL = 32;
    static const int EZNC_PLC_BIT_FLG = 1;
    static const int EZNC_PLC_BYTE_FLG = 2;
    static const int EZNC_PLC_WORD_FLG = 4;
    static const int EZNC_PLC_DWORD_FLG = 8;
    static const int EZNC_PLC_BIT = (EZNC_PLC_BIT_FLG | EZNC_PLC_1SHOT);
    static const int EZNC_PLC_BYTE = (EZNC_PLC_BYTE_FLG | EZNC_PLC_1SHOT);
    static const int EZNC_PLC_WORD = (EZNC_PLC_WORD_FLG | EZNC_PLC_1SHOT);
    static const int EZNC_PLC_DWORD = (EZNC_PLC_DWORD_FLG | EZNC_PLC_1SHOT);
    static const int EZNC_FILE_INIT = 0;
    static const int EZNC_FILE_READ = 1;
    static const int EZNC_FILE_WRITE = 2;
    static const int EZNC_FILE_OVERWRITE = 3;
    static const int EZNC_FILE_OPEN = 1;
    static const int EZNC_FILE_CREATE = 2;
    static const int EZNC_FILE_MODE_UNNCPROGRAM = 0;
    static const int EZNC_FILE_MODE_NCPROGRAM = 1;

    //NCリセット方法
    static const int EZNC_RESET_NONE = 0;	// NCリセット無し
    static const int EZNC_RESET_SIMPLE	= 1;// 現在オープン中のNCリセット
    static const int EZNC_RESET_ALL = 2;	// すべてのNCリセット
};


class EZDevice
{
public:
    uint DEVICE_F_ADD0[2] = { 0x9C40, 0x9C40 };
    uint DEVICE_B_ADD0[2] = { 0x0001d4c0, 0x0249f0 };//EZ B设备地址根据SetDevice中数据类型，同一Device抓到两个地址 bit byte 相同 ，word dword 相同
};

class EZClient
{
public:
    EZClient();

    //Init
    int Connect(QString IpAddress,int port);
    int DisConnect();
    int InitSession();
    int GetGIOPHead(QByteArray& Head);
    int GetPackageData(GIOPPackage& Package);

    //Device
    int Device_Read(QVector<int>& ReData);
    int Device_Read(QVector<int>& ReData, int RetryTimes);

    //CommonVariable
    int CommonVariable_Read2(int index,double& value);
    int CommonVariable_Read2(int index, double& value, int RetryTimes);
    int CommonVariable_Write2(int index, double value);

    int System_GetAlarm(QString& AlarmMsg);
    int System_GetAlarm(QString& AlarmMsg, int RetryTimes);

    int WriteDevice(uint Address,int DataType,int DataValue);
    int SetAlarm(QString DeviceName);
    int ClearAlarm(QString DeviceName);

     QByteArray GetAlarmPackageArray(int AlarmType);
     int ATC_GetMGNReady2(int lMagazineNo, int lReady, int& plToolNo);
     int ATC_GetMGNReady2(int lMagazineNo, int lReady, int& plToolNo, int RetryTimes);
     int Tool_SetOffset(int tid, float x0, float x1, float x2, float x3);
     QByteArray GIOPCmdPackge(QString operate, QString content,int mode = 1);

     //NCFile
     int File_ReadDir(QString path, QString& content);
     int File_ReadFile(QString path,QString& content);
     int File_WriteFile(QString path,QString& content);
     int File_DeleteFile(QString& path);

     bool Connected();

private:
     int GetDeivceADD(QString DeviceName,uint& Address);

private:
    QTcpSocket _TcpClient;
    QString _IpAddress;
    int _Port;
    uint8_t InitArry[80] =  { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x0f, 0x00, 0x00, 0x01, 0xf7, 0x76, 0x77, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x48, 0x27, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
    uint8_t StatusArray[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x57, 0x00, 0x00, 0x01, 0x5d, 0xc4, 0x77, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 };
    uint8_t ModeArray[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x57, 0x00, 0x00, 0x01, 0x5d, 0xc4, 0x77, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x10, 0x33, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 };
    uint8_t Status1Array[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x57, 0x00, 0x00, 0x01, 0x3b, 0x09, 0x0a, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00 };
    uint8_t Status2Array[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x57, 0x00, 0x00, 0x01, 0x3b, 0x09, 0x0a, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00 };
    uint8_t Status3Array[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x57, 0x00, 0x00, 0x01, 0x3b, 0x09, 0x0a, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00 };
    uint8_t MainProArray[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x12, 0x00, 0x00, 0x01, 0x00, 0xc2, 0x09, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
    uint8_t SubProArray[80] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x12, 0x00, 0x00, 0x01, 0x00, 0xc2, 0x09, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0xe5, 0x93, 0x08, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
    uint8_t GetAlarmArray[84] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x52, 0x00, 0x00, 0x01, 0x5d, 0xc4, 0x77, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    uint8_t SetOffsetArray[92] = { 0x47, 0x49, 0x4f, 0x50, 0x01, 0x00, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x56, 0x00, 0x00, 0x01, 0x04, 0x10, 0x05, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6d, 0x6f, 0x63, 0x68, 0x61, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb9, 0x0b, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40 };
};

#endif // EZCLIENT_H
